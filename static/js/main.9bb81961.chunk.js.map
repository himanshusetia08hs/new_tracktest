{"version":3,"sources":["components/Navi.js","components/Ctable.js","App.js","serviceWorker.js","index.js"],"names":["Navi","Navbar","bg","variant","className","Brand","href","width","src","Component","Ctable","props","this","districts","state","console","log","data","Table","striped","bordered","hover","size","responsive","style","margin","padding","background","Object","keys","districtData","map","value","active","delta","confirmed","Badge","pill","recovered","deceased","App","useState","latest","setLatest","india","setIndia","results","setResults","searchStates","setSearchStates","loading","setLoading","setDistricts","useEffect","axios","all","get","then","responseArr","statewise","catch","err","lastUpdated","Date","parseInt","updated","toString","states","filter","item","toLowerCase","includes","i","Card","border","key","text","Accordion","Toggle","as","Header","eventKey","color","Collapse","Body","Text","deltaconfirmed","deaths","CardDeck","Title","cases","todayCases","Footer","moment","calendar","Form","Group","controlId","Control","type","placeholder","onChange","e","target","queries","columns","query","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.9bb81961.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport { FcMindMap } from \"react-icons/fc\";\n\n\nclass Navi extends Component {\n    render() {\n        return (\n            <div>\n                <Navbar bg=\"black\" variant=\"dark\" className=\"text-center\">\n    <Navbar.Brand href=\"#home\">\n    <img width=\"28ch\" src=\"logomain.png\"/>{'   '}\n      COVID-19 Tracker\n    </Navbar.Brand>\n    \n  </Navbar>\n            </div>\n        )\n    }\n}\n\nexport default Navi\n","import React, { Component } from 'react'\nimport Table from 'react-bootstrap/Table'\nimport Badge from 'react-bootstrap/Badge'\n\n\nclass Ctable extends Component {\n    constructor(props){\n        super(props);\n        \n    }\n    render() {\n        const {districts, state} = this.props;\n        //console.log(\"Props\",this.props);\n        console.log(\"Hello\",state,districts.data[state]);\n        return (\n            <Table striped bordered hover size=\"sm\" responsive style={{ margin: \"0px\",padding:\"0px\" }}>\n        <small>\n            <thead>\n              <tr style={{background:\"light\"}}>\n              <th>District</th>\n                <th>Active</th>\n                <th>Confirmed</th>\n                <th>Recovered</th>\n                <th>Deaths</th>\n              </tr>\n              {\n                Object.keys(districts.data[state].districtData).map((value)=>{\n                    console.log(districts.data[state].districtData[value]);\n                    return (\n                        <tr>\n                        <td>{value}</td>\n                        <td>{districts.data[state].districtData[value].active}</td>\n                        <td>\n                        {\n                             districts.data[state].districtData[value].delta.confirmed !==0 ?  <Badge pill variant=\"warning\"><small><i className=\"fas fa-arrow-up\"/></small>{ districts.data[state].districtData[value].delta.confirmed}</Badge>:<></>\n                        }\n                            {districts.data[state].districtData[value].confirmed}</td>\n                        <td>{districts.data[state].districtData[value].recovered}</td>\n                        <td>{districts.data[state].districtData[value].deceased}</td>\n                              </tr>\n                    )\n                })\n                  \n    }\n            </thead>\n            </small>\n            </Table>\n        )\n    }\n}\n\nexport default Ctable\n\n\n","import React,{useEffect,useState} from 'react';\nimport Card from 'react-bootstrap/Card'\nimport CardDeck from 'react-bootstrap/CardDeck'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from \"axios\";\nimport moment from 'moment';\nimport Columns from 'react-columns'\nimport Form from 'react-bootstrap/Form'\nimport Navi from './components/Navi'\nimport { FcApproval } from \"react-icons/fc\";\nimport { FcGlobe } from \"react-icons/fc\";\nimport {CircleArrow as ScrollUpButton} from \"react-scroll-up-button\";\nimport Badge from 'react-bootstrap/Badge'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Ctable from './components/Ctable';\n\n\n\n\nfunction App() {\n\n  const[latest,setLatest]=useState([])\n  const[india,setIndia]=useState([])\n  const[results,setResults]=useState([])\n  const[searchStates,setSearchStates]=useState(\"\")\n  const[loading,setLoading]=useState(true)\n  const[districts,setDistricts]=useState()\n  \n  \n\n\n  useEffect(()=>{\n    axios\n    .all([\n    axios.get(\"https://disease.sh/v2/all\"),\n    axios.get(\"https://data.covid19india.org/data.json\"),\n    axios.get(\"https://disease.sh/v2/countries/india\"),\n    axios.get(\"https://data.covid19india.org/state_district_wise.json\")\n    ])\n        .then(responseArr=>{\n          setLatest(responseArr[0].data)\n          setResults(responseArr[1].data.statewise)\n          setIndia(responseArr[2].data)\n          setLoading(false)\n          setDistricts(responseArr[3]);\n        })\n        .catch(err=>{\n          console.log(\"error\");\n        });\n  },[]);\n\n  if(loading)\n  {\n    return \"Loading\";\n  }\n  const date=new Date(parseInt(latest.updated))\n  const lastUpdated=date.toString();\n\n  const filterStates = results.filter(item=>{\n    return searchStates !== \"\" ? item.state.toLowerCase().includes(searchStates.toLowerCase()) : item\n  })\n\n  const states= filterStates.map((data,i)=>{\n    if((data.state === \"Total\")||(data.state === \"State Unassigned\")){ \n      return null;\n  }\n  else if(districts){\n      \n    return(\n      <Card\n      border=\"secondary\"\n      key={i}\n      bg=\"dark\"\n       text=\"light\"\n      className=\"text-center\"\n      style={{ margin: \"8px\" }}\n    >\n      <Accordion >\n  <Card >\n    <Accordion.Toggle as={Card.Header} eventKey=\"0\" >\n    <b style={{color:\"black\"}}>{data.state}{\" \"}<img width=\"20ch\" src=\"info.png\"/></b>\n    </Accordion.Toggle>\n    <Accordion.Collapse eventKey=\"0\">\n    <Ctable state={data.state} districts = {districts}/>\n    </Accordion.Collapse>\n  </Card>\n  </Accordion>\n      <Card.Body>\n        \n      \n    <Card.Text><b>Active: </b>{data.active}</Card.Text>\n      <Card.Text>\n        {\n          data.deltaconfirmed != 0 ?  <Badge pill variant=\"primary\"><small><i className=\"fas fa-arrow-up\"/> {data.deltaconfirmed}</small></Badge>:<></>\n        }\n          <b>Confirmed: </b>{data.confirmed}</Card.Text>\n      <Card.Text><b>Deceased: </b>{data.deaths}</Card.Text>\n      <Card.Text><b>Recovered: </b>{data.recovered}</Card.Text>\n      </Card.Body>\n    </Card>\n    )}\n  })\n\n  var queries = [{\n    columns: 2,\n    query: 'min-width: 400px'\n  }, {\n    columns: 3,\n    query: 'min-width: 870px'\n  },{\n    columns: 3,\n    query: 'min-width: 1100px'\n  }];\n\n\n  return (\n   <div>\n     <Navi/>\n    <CardDeck>\n  <Card bg=\"warning\" text=\"white\" className=\"text-center\" style={{margin:\"10px\"}}>\n    <Card.Body>\n      <Card.Title><FcGlobe/>{' '}{latest.cases}</Card.Title>\n  <Card.Title ><b  style={{color:\"black\"}}><img width=\"25ch\" src=\"india.png\"/>{' '}</b>\n  {\n        india.todayCases !==0 ?  <Badge pill variant=\"danger\"><small><i className=\"fas fa-arrow-up\"/>{india.todayCases}</small></Badge>:<></>\n  }\n  {india.cases}</Card.Title>\n    </Card.Body>\n    <Card.Footer>\n        <b>Cases</b>\n    </Card.Footer>\n  </Card>\n  <Card bg=\"danger\" text=\"white\" className=\"text-center\" style={{margin:\"10px\"}}>\n    <Card.Body>\n      <Card.Title><FcGlobe/>{' '}{latest.deaths}</Card.Title>\n      <Card.Title><b  style={{color:\"black\"}}><img width=\"25ch\" src=\"india.png\"/>{' '}</b>{india.deaths}</Card.Title>\n    </Card.Body>\n    <Card.Footer>\n        <b>Deceased</b>\n    </Card.Footer>\n  </Card>\n  <Card bg=\"success\" text=\"white\" className=\"text-center\" style={{margin:\"10px\"}}>\n    <Card.Body>\n      <Card.Title><FcGlobe/>{' '}{latest.recovered}</Card.Title>\n      <Card.Title><b style={{color:\"black\"}}><img width=\"25ch\" src=\"india.png\"/>{' '}</b>{india.recovered}</Card.Title>\n    </Card.Body>\n    <Card.Footer>\n        <b>Recovered</b>\n    </Card.Footer>\n  </Card>\n</CardDeck>\n<small style={{color:\"white\"}}>Last updated {moment(lastUpdated).calendar()}</small>\n\n<Form>\n  <Form.Group controlId=\"formGroupSearch\" > \n    <Form.Control type=\"text\" placeholder=\"Search a state...\"  onChange={e => setSearchStates(e.target.value)}/> \n    <small style={{color:\"white\"}}>{' '}[Tap on state for district details]</small>\n  </Form.Group>\n</Form>\n\n\n\n  <Columns queries={queries}>{states}</Columns>\n\n  <Card\n      border=\"dark\"\n      bg=\"secondary\"\n       text=\"light\"\n      className=\"text-center\"\n      style={{ margin: \"8px\" }}\n    >\n      \n      \n      <Card.Header><b><FcApproval/>Developed by: </b><a target=\"_blank\" style={{ color: \"white\" }}href=\"https://github.com/gurkiratsinghofficial\">Gurkirat Singh</a><a target=\"_blank\" style={{ color: \"white\" }}href=\"https://github.com/Gaganpreetoberoi\"> Gaganpreet singh Oberoi</a> </Card.Header>\n      </Card>\n      <ScrollUpButton />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}