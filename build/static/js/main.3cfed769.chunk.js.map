{"version":3,"sources":["components/Navi.js","components/Ctable.js","App.js","serviceWorker.js","index.js"],"names":["Navi","Navbar","bg","variant","className","Brand","href","width","src","Component","Ctable","props","this","districts","state","console","log","data","Table","striped","bordered","hover","size","responsive","style","margin","padding","background","Object","keys","districtData","map","value","active","delta","confirmed","Badge","pill","recovered","deceased","App","useState","latest","setLatest","india","setIndia","results","setResults","searchStates","setSearchStates","loading","setLoading","setDistricts","useEffect","axios","all","get","then","responseArr","statewise","catch","err","lastUpdated","Date","parseInt","updated","toString","states","filter","item","toLowerCase","includes","i","Card","border","key","text","Accordion","Toggle","as","Header","eventKey","color","Collapse","Body","Text","deltaconfirmed","deaths","CardDeck","Title","cases","todayCases","Footer","moment","calendar","Form","Group","controlId","Control","type","placeholder","onChange","e","target","queries","columns","query","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3cfed769.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport { FcMindMap } from \"react-icons/fc\";\r\n\r\n\r\nclass Navi extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar bg=\"black\" variant=\"dark\" className=\"text-center\">\r\n    <Navbar.Brand href=\"#home\">\r\n    <img width=\"28ch\" src=\"logomain.png\"/>{'   '}\r\n      COVID-19 Tracker\r\n    </Navbar.Brand>\r\n    \r\n  </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navi\r\n","import React, { Component } from 'react'\r\nimport Table from 'react-bootstrap/Table'\r\nimport Badge from 'react-bootstrap/Badge'\r\n\r\n\r\nclass Ctable extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        \r\n    }\r\n    render() {\r\n        const {districts, state} = this.props;\r\n        //console.log(\"Props\",this.props);\r\n        console.log(\"Hello\",state,districts.data[state]);\r\n        return (\r\n            <Table striped bordered hover size=\"sm\" responsive style={{ margin: \"0px\",padding:\"0px\" }}>\r\n        <small>\r\n            <thead>\r\n              <tr style={{background:\"light\"}}>\r\n              <th>District</th>\r\n                <th>Active</th>\r\n                <th>Confirmed</th>\r\n                <th>Recovered</th>\r\n                <th>Deaths</th>\r\n              </tr>\r\n              {\r\n                Object.keys(districts.data[state].districtData).map((value)=>{\r\n                    console.log(districts.data[state].districtData[value]);\r\n                    return (\r\n                        <tr>\r\n                        <td>{value}</td>\r\n                        <td>{districts.data[state].districtData[value].active}</td>\r\n                        <td>\r\n                        {\r\n                             districts.data[state].districtData[value].delta.confirmed !==0 ?  <Badge pill variant=\"warning\"><small><i className=\"fas fa-arrow-up\"/></small>{ districts.data[state].districtData[value].delta.confirmed}</Badge>:<></>\r\n                        }\r\n                            {districts.data[state].districtData[value].confirmed}</td>\r\n                        <td>{districts.data[state].districtData[value].recovered}</td>\r\n                        <td>{districts.data[state].districtData[value].deceased}</td>\r\n                              </tr>\r\n                    )\r\n                })\r\n                  \r\n    }\r\n            </thead>\r\n            </small>\r\n            </Table>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Ctable\r\n\r\n\r\n","import React,{useEffect,useState} from 'react';\r\nimport Card from 'react-bootstrap/Card'\r\nimport CardDeck from 'react-bootstrap/CardDeck'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport axios from \"axios\";\r\nimport moment from 'moment';\r\nimport Columns from 'react-columns'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Navi from './components/Navi'\r\nimport { FcApproval } from \"react-icons/fc\";\r\nimport { FcGlobe } from \"react-icons/fc\";\r\nimport {CircleArrow as ScrollUpButton} from \"react-scroll-up-button\";\r\nimport Badge from 'react-bootstrap/Badge'\r\nimport Accordion from 'react-bootstrap/Accordion'\r\nimport Ctable from './components/Ctable';\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  const[latest,setLatest]=useState([])\r\n  const[india,setIndia]=useState([])\r\n  const[results,setResults]=useState([])\r\n  const[searchStates,setSearchStates]=useState(\"\")\r\n  const[loading,setLoading]=useState(true)\r\n  const[districts,setDistricts]=useState()\r\n  \r\n  \r\n\r\n\r\n  useEffect(()=>{\r\n    axios\r\n    .all([\r\n    axios.get(\"https://disease.sh/v2/all\"),\r\n    axios.get(\"https://api.covid19india.org/data.json\"),\r\n    axios.get(\"https://disease.sh/v2/countries/india\"),\r\n    axios.get(\"https://api.covid19india.org/state_district_wise.json\")\r\n    ])\r\n        .then(responseArr=>{\r\n          setLatest(responseArr[0].data)\r\n          setResults(responseArr[1].data.statewise)\r\n          setIndia(responseArr[2].data)\r\n          setLoading(false)\r\n          setDistricts(responseArr[3]);\r\n        })\r\n        .catch(err=>{\r\n          console.log(\"error\");\r\n        });\r\n  },[]);\r\n\r\n  if(loading)\r\n  {\r\n    return \"Loading\";\r\n  }\r\n  const date=new Date(parseInt(latest.updated))\r\n  const lastUpdated=date.toString();\r\n\r\n  const filterStates = results.filter(item=>{\r\n    return searchStates !== \"\" ? item.state.toLowerCase().includes(searchStates.toLowerCase()) : item\r\n  })\r\n\r\n  const states= filterStates.map((data,i)=>{\r\n    if((data.state === \"Total\")||(data.state === \"State Unassigned\")){ \r\n      return null;\r\n  }\r\n  else if(districts){\r\n      \r\n    return(\r\n      <Card\r\n      border=\"secondary\"\r\n      key={i}\r\n      bg=\"dark\"\r\n       text=\"light\"\r\n      className=\"text-center\"\r\n      style={{ margin: \"8px\" }}\r\n    >\r\n      <Accordion >\r\n  <Card >\r\n    <Accordion.Toggle as={Card.Header} eventKey=\"0\" >\r\n    <b style={{color:\"black\"}}>{data.state}{\" \"}<img width=\"20ch\" src=\"info.png\"/></b>\r\n    </Accordion.Toggle>\r\n    <Accordion.Collapse eventKey=\"0\">\r\n    <Ctable state={data.state} districts = {districts}/>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n  </Accordion>\r\n      <Card.Body>\r\n        \r\n      \r\n    <Card.Text><b>Active: </b>{data.active}</Card.Text>\r\n      <Card.Text>\r\n        {\r\n          data.deltaconfirmed != 0 ?  <Badge pill variant=\"primary\"><small><i className=\"fas fa-arrow-up\"/> {data.deltaconfirmed}</small></Badge>:<></>\r\n        }\r\n          <b>Confirmed: </b>{data.confirmed}</Card.Text>\r\n      <Card.Text><b>Deceased: </b>{data.deaths}</Card.Text>\r\n      <Card.Text><b>Recovered: </b>{data.recovered}</Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n    )}\r\n  })\r\n\r\n  var queries = [{\r\n    columns: 2,\r\n    query: 'min-width: 400px'\r\n  }, {\r\n    columns: 3,\r\n    query: 'min-width: 870px'\r\n  },{\r\n    columns: 3,\r\n    query: 'min-width: 1100px'\r\n  }];\r\n\r\n\r\n  return (\r\n   <div>\r\n     <Navi/>\r\n    <CardDeck>\r\n  <Card bg=\"warning\" text=\"white\" className=\"text-center\" style={{margin:\"10px\"}}>\r\n    <Card.Body>\r\n      <Card.Title><FcGlobe/>{' '}{latest.cases}</Card.Title>\r\n  <Card.Title ><b  style={{color:\"black\"}}><img width=\"25ch\" src=\"india.png\"/>{' '}</b>\r\n  {\r\n        india.todayCases !==0 ?  <Badge pill variant=\"danger\"><small><i className=\"fas fa-arrow-up\"/>{india.todayCases}</small></Badge>:<></>\r\n  }\r\n  {india.cases}</Card.Title>\r\n    </Card.Body>\r\n    <Card.Footer>\r\n        <b>Cases</b>\r\n    </Card.Footer>\r\n  </Card>\r\n  <Card bg=\"danger\" text=\"white\" className=\"text-center\" style={{margin:\"10px\"}}>\r\n    <Card.Body>\r\n      <Card.Title><FcGlobe/>{' '}{latest.deaths}</Card.Title>\r\n      <Card.Title><b  style={{color:\"black\"}}><img width=\"25ch\" src=\"india.png\"/>{' '}</b>{india.deaths}</Card.Title>\r\n    </Card.Body>\r\n    <Card.Footer>\r\n        <b>Deceased</b>\r\n    </Card.Footer>\r\n  </Card>\r\n  <Card bg=\"success\" text=\"white\" className=\"text-center\" style={{margin:\"10px\"}}>\r\n    <Card.Body>\r\n      <Card.Title><FcGlobe/>{' '}{latest.recovered}</Card.Title>\r\n      <Card.Title><b style={{color:\"black\"}}><img width=\"25ch\" src=\"india.png\"/>{' '}</b>{india.recovered}</Card.Title>\r\n    </Card.Body>\r\n    <Card.Footer>\r\n        <b>Recovered</b>\r\n    </Card.Footer>\r\n  </Card>\r\n</CardDeck>\r\n<small style={{color:\"white\"}}>Last updated {moment(lastUpdated).calendar()}</small>\r\n\r\n<Form>\r\n  <Form.Group controlId=\"formGroupSearch\" > \r\n    <Form.Control type=\"text\" placeholder=\"Search a state...\"  onChange={e => setSearchStates(e.target.value)}/> \r\n    <small style={{color:\"white\"}}>{' '}[Tap on state for district details]</small>\r\n  </Form.Group>\r\n</Form>\r\n\r\n\r\n\r\n  <Columns queries={queries}>{states}</Columns>\r\n\r\n  <Card\r\n      border=\"dark\"\r\n      bg=\"secondary\"\r\n       text=\"light\"\r\n      className=\"text-center\"\r\n      style={{ margin: \"8px\" }}\r\n    >\r\n      \r\n      \r\n      <Card.Header><b><FcApproval/>Developed by: </b><a target=\"_blank\" style={{ color: \"white\" }}href=\"https://github.com/gurkiratsinghofficial\">Gurkirat Singh</a><a target=\"_blank\" style={{ color: \"white\" }}href=\"https://github.com/Gaganpreetoberoi\"> Gaganpreet singh Oberoi</a> </Card.Header>\r\n      </Card>\r\n      <ScrollUpButton />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}